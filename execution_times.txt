This file contains execution times of some functions to see what we should limit so the test code doesn't bloat
up the number of lines changed -Samer

Credit to the author of marked solution: 
https://stackoverflow.com/questions/22387586/measuring-execution-time-of-a-function-in-c

Main difference with the tests here is that it loops 1 million times.
A sum will be added for each duration.
Differences will be the "average over 1 million" times.

1000 microseconds = 1 millisecond


FindWindow vs. GetHWND
----------------------
FindWindow: 29.614341 microseconds (slow)
GetHWND:    0.034747 microseconds
Conclusion: - Use GetHWND (for now) if you need to use FindWindow more than once
			- FindWindow should probably only be used in async functions (like SendMessageCallback or PostMessage) 
			  as it might hang the app for a little bit during execution synchronization
			- Ultimately, using an application service container would be better. FindWindow should be avoided.

make_unique vs new
------------------
make_unique: 7.281454 microseconds
new:         3.954919 microseconds
Conclusion: The performance impact is negligible as std::unique_ptr has added security

GetAncestor(GetActiveWindow(), GA_ROOT) // g_RAMainWnd
---------------------------------------
GetActiveWindow:                       0.302479 microseconds
Getting the root window (g_RAMainWnd): 1.501977 microseconds 
Conclusion: The performance impact is negligible 

GetModuleHandle:
================
Time: 0.692298 microseconds
Conclusion: The performance impact is negligible

*These were run in separate loops
std::ostringstream and assign to string vs sprintf_s (Dlg_MemBookmark::WriteFrozenValue)
====================================================
ostringstream operator<<:       12.000000 microseconds
ostringstream::str initialize:  5.949241 microseconds

*These next will show 
======================================
Above together: 30.247679 microseconds
sprintf:         0.863375 microseconds
sprintf_s:       0.966183 microseconds
======================================

sprintf is the fastest but ostringstream has added security so the slowness is to be excepted. 
It's not too slow for desktop apps/services.
